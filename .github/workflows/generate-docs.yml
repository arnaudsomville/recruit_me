name: Build, Test, and Deploy Documentation

on:
  push: {}
  pull_request: {}

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false

      - name: Set up Conda environment
        run: |
          conda init bash
          source ~/.bashrc
          conda create -n ci_env python=3.11 -y
          conda activate ci_env
          pip install --upgrade pip
          pip install pdm==2.20.1 pre-commit
          pdm config python.use_venv false
          pdm install --dev

      - name: Run pre-commit hooks
        run: |
          source ~/.bashrc
          conda activate ci_env
          pre-commit run -a

      - name: Run tests with coverage
        run: |
          source ~/.bashrc
          conda activate ci_env
          set +e
          pdm run pytest --cov=src --cov-report=term --cov-report=json --cov-report=html --cov-fail-under=85 > coverage_output.txt
          TEST_EXIT_CODE=$?
          set -e
          echo "# Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -A 15 "coverage:" coverage_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat $GITHUB_STEP_SUMMARY
          exit $TEST_EXIT_CODE
  build-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, 'generate_image')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t recruit_me .

      - name: Test Docker image
        run: |
          docker run --rm -d --name test_recruit_me -p 8080:8080 recruit_me
          sleep 5 # Allow container to start
          if ! curl -f http://localhost:8080; then
            echo "Docker container failed to start."
            docker logs test_recruit_me
            exit 1
          fi
          docker stop test_recruit_me

      - name: Save Docker image as artifact
        run: |
          docker save recruit_me > docker-save.tar
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: recruit_me-docker-image
          path: docker-save.tar


  build-and-deploy-docs:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false

      - name: Set up Conda environment for documentation
        run: |
          conda init bash
          source ~/.bashrc
          conda create -n ci_env python=3.11 -y
          conda activate ci_env
          pip install --upgrade pip
          pip install pdm==2.20.1
          pdm config python.use_venv false
          pdm install --dev

      - name: Build documentation
        run: |
          source ~/.bashrc
          conda activate ci_env
          pip install sphinx
          sphinx-apidoc -o docs/source src/ --force --separate
          cd docs
          pdm run make clean
          pdm run make html

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html